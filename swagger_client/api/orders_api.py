# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_order_api_v1_orders_order_id_delete(self, order_id, **kwargs):  # noqa: E501
        """Delete Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_order_api_v1_orders_order_id_delete(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_order_api_v1_orders_order_id_delete_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_order_api_v1_orders_order_id_delete_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def delete_order_api_v1_orders_order_id_delete_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Delete Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_order_api_v1_orders_order_id_delete_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_order_api_v1_orders_order_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `delete_order_api_v1_orders_order_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders/{order_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_active_orders_api_v1_orders_get(self, dropshipping, token, **kwargs):  # noqa: E501
        """Get Active Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_orders_api_v1_orders_get(dropshipping, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool dropshipping: (required)
        :param str token: (required)
        :param int user_id:
        :return: list[OrderBaseDb]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_orders_api_v1_orders_get_with_http_info(dropshipping, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_active_orders_api_v1_orders_get_with_http_info(dropshipping, token, **kwargs)  # noqa: E501
            return data

    def get_active_orders_api_v1_orders_get_with_http_info(self, dropshipping, token, **kwargs):  # noqa: E501
        """Get Active Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_orders_api_v1_orders_get_with_http_info(dropshipping, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool dropshipping: (required)
        :param str token: (required)
        :param int user_id:
        :return: list[OrderBaseDb]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dropshipping', 'token', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_orders_api_v1_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dropshipping' is set
        if ('dropshipping' not in params or
                params['dropshipping'] is None):
            raise ValueError("Missing the required parameter `dropshipping` when calling `get_active_orders_api_v1_orders_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_active_orders_api_v1_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dropshipping' in params:
            query_params.append(('dropshipping', params['dropshipping']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderBaseDb]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_count_orders_api_v1_orders_count_get(self, status, token, **kwargs):  # noqa: E501
        """Get Count Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_count_orders_api_v1_orders_count_get(status, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: (required)
        :param str token: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_count_orders_api_v1_orders_count_get_with_http_info(status, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_count_orders_api_v1_orders_count_get_with_http_info(status, token, **kwargs)  # noqa: E501
            return data

    def get_count_orders_api_v1_orders_count_get_with_http_info(self, status, token, **kwargs):  # noqa: E501
        """Get Count Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_count_orders_api_v1_orders_count_get_with_http_info(status, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: (required)
        :param str token: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_count_orders_api_v1_orders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_count_orders_api_v1_orders_count_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_count_orders_api_v1_orders_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get(self, user_id, status, token, **kwargs):  # noqa: E501
        """Get Count Orders By User Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get(user_id, status, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int status: (required)
        :param str token: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get_with_http_info(user_id, status, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get_with_http_info(user_id, status, token, **kwargs)  # noqa: E501
            return data

    def get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get_with_http_info(self, user_id, status, token, **kwargs):  # noqa: E501
        """Get Count Orders By User Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get_with_http_info(user_id, status, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int status: (required)
        :param str token: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'status', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_count_orders_by_user_id_api_v1_orders_users_user_id_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders/users/{user_id}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_by_id_api_v1_orders_order_id_get(self, order_id, **kwargs):  # noqa: E501
        """Get Order By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_by_id_api_v1_orders_order_id_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: (required)
        :param bool purchases:
        :param bool item:
        :param bool size:
        :param bool user_bot:
        :param bool partner:
        :param bool order_by_purchases:
        :return: OrderBaseDb
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_by_id_api_v1_orders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_by_id_api_v1_orders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def get_order_by_id_api_v1_orders_order_id_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Get Order By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_by_id_api_v1_orders_order_id_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: (required)
        :param bool purchases:
        :param bool item:
        :param bool size:
        :param bool user_bot:
        :param bool partner:
        :param bool order_by_purchases:
        :return: OrderBaseDb
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'purchases', 'item', 'size', 'user_bot', 'partner', 'order_by_purchases']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_by_id_api_v1_orders_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `get_order_by_id_api_v1_orders_order_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []
        if 'purchases' in params:
            query_params.append(('purchases', params['purchases']))  # noqa: E501
        if 'item' in params:
            query_params.append(('item', params['item']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'user_bot' in params:
            query_params.append(('user_bot', params['user_bot']))  # noqa: E501
        if 'partner' in params:
            query_params.append(('partner', params['partner']))  # noqa: E501
        if 'order_by_purchases' in params:
            query_params.append(('order_by_purchases', params['order_by_purchases']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders/{order_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderBaseDb',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_orders_api_v1_orders_users_user_id_get(self, user_id, purchase_status, token, **kwargs):  # noqa: E501
        """Get User Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_orders_api_v1_orders_users_user_id_get(user_id, purchase_status, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int purchase_status: (required)
        :param str token: (required)
        :return: list[OrderBaseDb]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_orders_api_v1_orders_users_user_id_get_with_http_info(user_id, purchase_status, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_orders_api_v1_orders_users_user_id_get_with_http_info(user_id, purchase_status, token, **kwargs)  # noqa: E501
            return data

    def get_user_orders_api_v1_orders_users_user_id_get_with_http_info(self, user_id, purchase_status, token, **kwargs):  # noqa: E501
        """Get User Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_orders_api_v1_orders_users_user_id_get_with_http_info(user_id, purchase_status, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int purchase_status: (required)
        :param str token: (required)
        :return: list[OrderBaseDb]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'purchase_status', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_orders_api_v1_orders_users_user_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_orders_api_v1_orders_users_user_id_get`")  # noqa: E501
        # verify the required parameter 'purchase_status' is set
        if ('purchase_status' not in params or
                params['purchase_status'] is None):
            raise ValueError("Missing the required parameter `purchase_status` when calling `get_user_orders_api_v1_orders_users_user_id_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_user_orders_api_v1_orders_users_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'purchase_status' in params:
            query_params.append(('purchase_status', params['purchase_status']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders/users/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderBaseDb]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_order_api_v1_orders_post(self, body, token, **kwargs):  # noqa: E501
        """Insert Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_order_api_v1_orders_post(body, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InsertOrder body: (required)
        :param str token: (required)
        :return: OrderBaseDb
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_order_api_v1_orders_post_with_http_info(body, token, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_order_api_v1_orders_post_with_http_info(body, token, **kwargs)  # noqa: E501
            return data

    def insert_order_api_v1_orders_post_with_http_info(self, body, token, **kwargs):  # noqa: E501
        """Insert Order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_order_api_v1_orders_post_with_http_info(body, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InsertOrder body: (required)
        :param str token: (required)
        :return: OrderBaseDb
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_order_api_v1_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `insert_order_api_v1_orders_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `insert_order_api_v1_orders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderBaseDb',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_order_temporally_api_v1_orders_temporally_post(self, body, **kwargs):  # noqa: E501
        """Insert Order Temporally  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_order_temporally_api_v1_orders_temporally_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InsertOrderTemporally body: (required)
        :return: OrderBaseDb
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_order_temporally_api_v1_orders_temporally_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_order_temporally_api_v1_orders_temporally_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def insert_order_temporally_api_v1_orders_temporally_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Insert Order Temporally  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_order_temporally_api_v1_orders_temporally_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InsertOrderTemporally body: (required)
        :return: OrderBaseDb
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_order_temporally_api_v1_orders_temporally_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `insert_order_temporally_api_v1_orders_temporally_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/orders/temporally', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderBaseDb',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
