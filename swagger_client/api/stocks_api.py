# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StocksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_stock_by_stock_id_api_v1_stocks_user_stock_id_get(self, stock_id, **kwargs):  # noqa: E501
        """Get Stock By Stock Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stock_by_stock_id_api_v1_stocks_user_stock_id_get(stock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stock_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stock_by_stock_id_api_v1_stocks_user_stock_id_get_with_http_info(stock_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stock_by_stock_id_api_v1_stocks_user_stock_id_get_with_http_info(stock_id, **kwargs)  # noqa: E501
            return data

    def get_stock_by_stock_id_api_v1_stocks_user_stock_id_get_with_http_info(self, stock_id, **kwargs):  # noqa: E501
        """Get Stock By Stock Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stock_by_stock_id_api_v1_stocks_user_stock_id_get_with_http_info(stock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stock_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stock_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stock_by_stock_id_api_v1_stocks_user_stock_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stock_id' is set
        if ('stock_id' not in params or
                params['stock_id'] is None):
            raise ValueError("Missing the required parameter `stock_id` when calling `get_stock_by_stock_id_api_v1_stocks_user_stock_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stock_id' in params:
            path_params['stock_id'] = params['stock_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stocks/user/{stock_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get(self, stock_id, **kwargs):  # noqa: E501
        """Get Stock Without Load By Stock Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get(stock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stock_id: (required)
        :return: Stock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get_with_http_info(stock_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get_with_http_info(stock_id, **kwargs)  # noqa: E501
            return data

    def get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get_with_http_info(self, stock_id, **kwargs):  # noqa: E501
        """Get Stock Without Load By Stock Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get_with_http_info(stock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stock_id: (required)
        :return: Stock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stock_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stock_id' is set
        if ('stock_id' not in params or
                params['stock_id'] is None):
            raise ValueError("Missing the required parameter `stock_id` when calling `get_stock_without_load_by_stock_id_api_v1_stocks_stock_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stock_id' in params:
            path_params['stock_id'] = params['stock_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stocks/{stock_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stocks_by_order_code_api_v1_stocks_code_size_get(self, code, size, **kwargs):  # noqa: E501
        """Get Stocks By Order Code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stocks_by_order_code_api_v1_stocks_code_size_get(code, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str size: (required)
        :return: list[Stock]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stocks_by_order_code_api_v1_stocks_code_size_get_with_http_info(code, size, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stocks_by_order_code_api_v1_stocks_code_size_get_with_http_info(code, size, **kwargs)  # noqa: E501
            return data

    def get_stocks_by_order_code_api_v1_stocks_code_size_get_with_http_info(self, code, size, **kwargs):  # noqa: E501
        """Get Stocks By Order Code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stocks_by_order_code_api_v1_stocks_code_size_get_with_http_info(code, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str size: (required)
        :return: list[Stock]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stocks_by_order_code_api_v1_stocks_code_size_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_stocks_by_order_code_api_v1_stocks_code_size_get`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `get_stocks_by_order_code_api_v1_stocks_code_size_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501
        if 'size' in params:
            path_params['size'] = params['size']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/stocks/{code}/{size}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Stock]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
