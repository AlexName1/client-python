# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_brands_and_counts_api_v1_items_category_brands_counts_get(self, category, **kwargs):  # noqa: E501
        """Get Brands And Counts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_brands_and_counts_api_v1_items_category_brands_counts_get(category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :return: list[BrandCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_brands_and_counts_api_v1_items_category_brands_counts_get_with_http_info(category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_brands_and_counts_api_v1_items_category_brands_counts_get_with_http_info(category, **kwargs)  # noqa: E501
            return data

    def get_brands_and_counts_api_v1_items_category_brands_counts_get_with_http_info(self, category, **kwargs):  # noqa: E501
        """Get Brands And Counts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_brands_and_counts_api_v1_items_category_brands_counts_get_with_http_info(category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :return: list[BrandCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_brands_and_counts_api_v1_items_category_brands_counts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `get_brands_and_counts_api_v1_items_category_brands_counts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{category}/brands-counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BrandCount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_codes_items_api_v1_items_codes_get(self, **kwargs):  # noqa: E501
        """Get Codes Items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_codes_items_api_v1_items_codes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_codes_items_api_v1_items_codes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_codes_items_api_v1_items_codes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_codes_items_api_v1_items_codes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Codes Items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_codes_items_api_v1_items_codes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_codes_items_api_v1_items_codes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/codes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_api_v1_items_code_token_one_get(self, code, token, **kwargs):  # noqa: E501
        """Get Item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_api_v1_items_code_token_one_get(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :param bool active:
        :param int size_id:
        :return: ItemBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_api_v1_items_code_token_one_get_with_http_info(code, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_api_v1_items_code_token_one_get_with_http_info(code, token, **kwargs)  # noqa: E501
            return data

    def get_item_api_v1_items_code_token_one_get_with_http_info(self, code, token, **kwargs):  # noqa: E501
        """Get Item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_api_v1_items_code_token_one_get_with_http_info(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :param bool active:
        :param int size_id:
        :return: ItemBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'token', 'active', 'size_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_api_v1_items_code_token_one_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_item_api_v1_items_code_token_one_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_item_api_v1_items_code_token_one_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'size_id' in params:
            query_params.append(('size_id', params['size_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{code}/{token}/one', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_selectinload_size_api_v1_items_code_token_load_size_get(self, code, token, **kwargs):  # noqa: E501
        """Get Item Selectinload Size  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_selectinload_size_api_v1_items_code_token_load_size_get(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :param bool like:
        :return: ItemWithQuantitySizeDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_selectinload_size_api_v1_items_code_token_load_size_get_with_http_info(code, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_selectinload_size_api_v1_items_code_token_load_size_get_with_http_info(code, token, **kwargs)  # noqa: E501
            return data

    def get_item_selectinload_size_api_v1_items_code_token_load_size_get_with_http_info(self, code, token, **kwargs):  # noqa: E501
        """Get Item Selectinload Size  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_selectinload_size_api_v1_items_code_token_load_size_get_with_http_info(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :param bool like:
        :return: ItemWithQuantitySizeDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'token', 'like']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_selectinload_size_api_v1_items_code_token_load_size_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_item_selectinload_size_api_v1_items_code_token_load_size_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_item_selectinload_size_api_v1_items_code_token_load_size_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'like' in params:
            query_params.append(('like', params['like']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{code}/{token}/load-size', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemWithQuantitySizeDimension',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get(self, code, token, **kwargs):  # noqa: E501
        """Get Item Selectinload Size Category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :return: ItemWithQuantitySizeCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get_with_http_info(code, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get_with_http_info(code, token, **kwargs)  # noqa: E501
            return data

    def get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get_with_http_info(self, code, token, **kwargs):  # noqa: E501
        """Get Item Selectinload Size Category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get_with_http_info(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :return: ItemWithQuantitySizeCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_item_selectinload_size_category_api_v1_items_code_token_load_size_category_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{code}/{token}/load-size-category', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemWithQuantitySizeCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get(self, code, token, **kwargs):  # noqa: E501
        """Get Item Selectinload Size Centimeter Category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :return: ItemWithQuantitySizeCentimeterCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get_with_http_info(code, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get_with_http_info(code, token, **kwargs)  # noqa: E501
            return data

    def get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get_with_http_info(self, code, token, **kwargs):  # noqa: E501
        """Get Item Selectinload Size Centimeter Category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get_with_http_info(code, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str token: (required)
        :return: ItemWithQuantitySizeCentimeterCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_item_selectinload_size_centimeter_category_api_v1_items_code_token_load_size_centimeter_category_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{code}/{token}/load-size-centimeter-category', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemWithQuantitySizeCentimeterCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_items_action_api_v1_items_token_all_get(self, token, action, **kwargs):  # noqa: E501
        """Get Items Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_action_api_v1_items_token_all_get(token, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str action: (required)
        :param str category:
        :param int size:
        :param str color:
        :param str season:
        :return: list[ItemWithQuantityStockSizeDimension]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_items_action_api_v1_items_token_all_get_with_http_info(token, action, **kwargs)  # noqa: E501
        else:
            (data) = self.get_items_action_api_v1_items_token_all_get_with_http_info(token, action, **kwargs)  # noqa: E501
            return data

    def get_items_action_api_v1_items_token_all_get_with_http_info(self, token, action, **kwargs):  # noqa: E501
        """Get Items Action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_action_api_v1_items_token_all_get_with_http_info(token, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str action: (required)
        :param str category:
        :param int size:
        :param str color:
        :param str season:
        :return: list[ItemWithQuantityStockSizeDimension]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'action', 'category', 'size', 'color', 'season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items_action_api_v1_items_token_all_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_items_action_api_v1_items_token_all_get`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `get_items_action_api_v1_items_token_all_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{token}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ItemWithQuantityStockSizeDimension]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_items_api_v1_items_category_brand_token_get(self, category, brand, token, **kwargs):  # noqa: E501
        """Get Items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_api_v1_items_category_brand_token_get(category, brand, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :param str brand: (required)
        :param str token: (required)
        :param str model:
        :return: list[ItemWithQuantitySizeDimension]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_items_api_v1_items_category_brand_token_get_with_http_info(category, brand, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_items_api_v1_items_category_brand_token_get_with_http_info(category, brand, token, **kwargs)  # noqa: E501
            return data

    def get_items_api_v1_items_category_brand_token_get_with_http_info(self, category, brand, token, **kwargs):  # noqa: E501
        """Get Items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_api_v1_items_category_brand_token_get_with_http_info(category, brand, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :param str brand: (required)
        :param str token: (required)
        :param str model:
        :return: list[ItemWithQuantitySizeDimension]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category', 'brand', 'token', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items_api_v1_items_category_brand_token_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `get_items_api_v1_items_category_brand_token_get`")  # noqa: E501
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `get_items_api_v1_items_category_brand_token_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_items_api_v1_items_category_brand_token_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']  # noqa: E501
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{category}/{brand}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ItemWithQuantitySizeDimension]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_models_and_counts_api_v1_items_category_brand_models_counts_get(self, category, brand, **kwargs):  # noqa: E501
        """Get Models And Counts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_models_and_counts_api_v1_items_category_brand_models_counts_get(category, brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :param str brand: (required)
        :return: list[ModelCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_models_and_counts_api_v1_items_category_brand_models_counts_get_with_http_info(category, brand, **kwargs)  # noqa: E501
        else:
            (data) = self.get_models_and_counts_api_v1_items_category_brand_models_counts_get_with_http_info(category, brand, **kwargs)  # noqa: E501
            return data

    def get_models_and_counts_api_v1_items_category_brand_models_counts_get_with_http_info(self, category, brand, **kwargs):  # noqa: E501
        """Get Models And Counts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_models_and_counts_api_v1_items_category_brand_models_counts_get_with_http_info(category, brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :param str brand: (required)
        :return: list[ModelCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category', 'brand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_models_and_counts_api_v1_items_category_brand_models_counts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `get_models_and_counts_api_v1_items_category_brand_models_counts_get`")  # noqa: E501
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `get_models_and_counts_api_v1_items_category_brand_models_counts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']  # noqa: E501
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{category}/{brand}/models-counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelCount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_models_api_v1_items_category_brand_models_get(self, category, brand, **kwargs):  # noqa: E501
        """Get Models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_models_api_v1_items_category_brand_models_get(category, brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :param str brand: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_models_api_v1_items_category_brand_models_get_with_http_info(category, brand, **kwargs)  # noqa: E501
        else:
            (data) = self.get_models_api_v1_items_category_brand_models_get_with_http_info(category, brand, **kwargs)  # noqa: E501
            return data

    def get_models_api_v1_items_category_brand_models_get_with_http_info(self, category, brand, **kwargs):  # noqa: E501
        """Get Models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_models_api_v1_items_category_brand_models_get_with_http_info(category, brand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: (required)
        :param str brand: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category', 'brand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_models_api_v1_items_category_brand_models_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `get_models_api_v1_items_category_brand_models_get`")  # noqa: E501
        # verify the required parameter 'brand' is set
        if ('brand' not in params or
                params['brand'] is None):
            raise ValueError("Missing the required parameter `brand` when calling `get_models_api_v1_items_category_brand_models_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']  # noqa: E501
        if 'brand' in params:
            path_params['brand'] = params['brand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/{category}/{brand}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_or_update_api_v1_items_merge_post(self, body, **kwargs):  # noqa: E501
        """Insert Or Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_or_update_api_v1_items_merge_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_or_update_api_v1_items_merge_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_or_update_api_v1_items_merge_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def insert_or_update_api_v1_items_merge_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Insert Or Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_or_update_api_v1_items_merge_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_or_update_api_v1_items_merge_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `insert_or_update_api_v1_items_merge_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_active_api_v1_items_active_put(self, body, **kwargs):  # noqa: E501
        """Update Active  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_active_api_v1_items_active_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ItemsUpdateActive body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_active_api_v1_items_active_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_active_api_v1_items_active_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_active_api_v1_items_active_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Active  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_active_api_v1_items_active_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ItemsUpdateActive body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_active_api_v1_items_active_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_active_api_v1_items_active_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/active', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_photo_by_code_api_v1_items_photo_code_file_id_photo_put(self, code, file_id_photo, **kwargs):  # noqa: E501
        """Update Photo By Code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_photo_by_code_api_v1_items_photo_code_file_id_photo_put(code, file_id_photo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str file_id_photo: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_photo_by_code_api_v1_items_photo_code_file_id_photo_put_with_http_info(code, file_id_photo, **kwargs)  # noqa: E501
        else:
            (data) = self.update_photo_by_code_api_v1_items_photo_code_file_id_photo_put_with_http_info(code, file_id_photo, **kwargs)  # noqa: E501
            return data

    def update_photo_by_code_api_v1_items_photo_code_file_id_photo_put_with_http_info(self, code, file_id_photo, **kwargs):  # noqa: E501
        """Update Photo By Code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_photo_by_code_api_v1_items_photo_code_file_id_photo_put_with_http_info(code, file_id_photo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :param str file_id_photo: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'file_id_photo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_photo_by_code_api_v1_items_photo_code_file_id_photo_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `update_photo_by_code_api_v1_items_photo_code_file_id_photo_put`")  # noqa: E501
        # verify the required parameter 'file_id_photo' is set
        if ('file_id_photo' not in params or
                params['file_id_photo'] is None):
            raise ValueError("Missing the required parameter `file_id_photo` when calling `update_photo_by_code_api_v1_items_photo_code_file_id_photo_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501
        if 'file_id_photo' in params:
            path_params['file_id_photo'] = params['file_id_photo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBasic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/items/photo/{code}/{file_id_photo}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
