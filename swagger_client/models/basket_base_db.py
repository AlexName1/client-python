# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasketBaseDb(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'item_code': 'str',
        'price': 'int',
        'user_bot_id': 'int',
        'size_id': 'int',
        'user_bot': 'UserBotBase',
        'size': 'SizeBase',
        'item': 'ItemBase'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'item_code': 'item_code',
        'price': 'price',
        'user_bot_id': 'user_bot_id',
        'size_id': 'size_id',
        'user_bot': 'user_bot',
        'size': 'size',
        'item': 'item'
    }

    def __init__(self, id=None, created=None, item_code=None, price=None, user_bot_id=None, size_id=None, user_bot=None, size=None, item=None):  # noqa: E501
        """BasketBaseDb - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._item_code = None
        self._price = None
        self._user_bot_id = None
        self._size_id = None
        self._user_bot = None
        self._size = None
        self._item = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if item_code is not None:
            self.item_code = item_code
        if price is not None:
            self.price = price
        if user_bot_id is not None:
            self.user_bot_id = user_bot_id
        if size_id is not None:
            self.size_id = size_id
        if user_bot is not None:
            self.user_bot = user_bot
        if size is not None:
            self.size = size
        if item is not None:
            self.item = item

    @property
    def id(self):
        """Gets the id of this BasketBaseDb.  # noqa: E501


        :return: The id of this BasketBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasketBaseDb.


        :param id: The id of this BasketBaseDb.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this BasketBaseDb.  # noqa: E501


        :return: The created of this BasketBaseDb.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BasketBaseDb.


        :param created: The created of this BasketBaseDb.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def item_code(self):
        """Gets the item_code of this BasketBaseDb.  # noqa: E501


        :return: The item_code of this BasketBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """Sets the item_code of this BasketBaseDb.


        :param item_code: The item_code of this BasketBaseDb.  # noqa: E501
        :type: str
        """

        self._item_code = item_code

    @property
    def price(self):
        """Gets the price of this BasketBaseDb.  # noqa: E501


        :return: The price of this BasketBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BasketBaseDb.


        :param price: The price of this BasketBaseDb.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def user_bot_id(self):
        """Gets the user_bot_id of this BasketBaseDb.  # noqa: E501


        :return: The user_bot_id of this BasketBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._user_bot_id

    @user_bot_id.setter
    def user_bot_id(self, user_bot_id):
        """Sets the user_bot_id of this BasketBaseDb.


        :param user_bot_id: The user_bot_id of this BasketBaseDb.  # noqa: E501
        :type: int
        """

        self._user_bot_id = user_bot_id

    @property
    def size_id(self):
        """Gets the size_id of this BasketBaseDb.  # noqa: E501


        :return: The size_id of this BasketBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._size_id

    @size_id.setter
    def size_id(self, size_id):
        """Sets the size_id of this BasketBaseDb.


        :param size_id: The size_id of this BasketBaseDb.  # noqa: E501
        :type: int
        """

        self._size_id = size_id

    @property
    def user_bot(self):
        """Gets the user_bot of this BasketBaseDb.  # noqa: E501


        :return: The user_bot of this BasketBaseDb.  # noqa: E501
        :rtype: UserBotBase
        """
        return self._user_bot

    @user_bot.setter
    def user_bot(self, user_bot):
        """Sets the user_bot of this BasketBaseDb.


        :param user_bot: The user_bot of this BasketBaseDb.  # noqa: E501
        :type: UserBotBase
        """

        self._user_bot = user_bot

    @property
    def size(self):
        """Gets the size of this BasketBaseDb.  # noqa: E501


        :return: The size of this BasketBaseDb.  # noqa: E501
        :rtype: SizeBase
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BasketBaseDb.


        :param size: The size of this BasketBaseDb.  # noqa: E501
        :type: SizeBase
        """

        self._size = size

    @property
    def item(self):
        """Gets the item of this BasketBaseDb.  # noqa: E501


        :return: The item of this BasketBaseDb.  # noqa: E501
        :rtype: ItemBase
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BasketBaseDb.


        :param item: The item of this BasketBaseDb.  # noqa: E501
        :type: ItemBase
        """

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasketBaseDb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasketBaseDb):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
