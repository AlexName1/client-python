# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InfoItemUpdateNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'retail_price': 'int',
        'link': 'str',
        'discount_price': 'int'
    }

    attribute_map = {
        'code': 'code',
        'retail_price': 'retail_price',
        'link': 'link',
        'discount_price': 'discount_price'
    }

    def __init__(self, code=None, retail_price=None, link=None, discount_price=None):  # noqa: E501
        """InfoItemUpdateNew - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._retail_price = None
        self._link = None
        self._discount_price = None
        self.discriminator = None
        self.code = code
        if retail_price is not None:
            self.retail_price = retail_price
        if link is not None:
            self.link = link
        if discount_price is not None:
            self.discount_price = discount_price

    @property
    def code(self):
        """Gets the code of this InfoItemUpdateNew.  # noqa: E501


        :return: The code of this InfoItemUpdateNew.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InfoItemUpdateNew.


        :param code: The code of this InfoItemUpdateNew.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def retail_price(self):
        """Gets the retail_price of this InfoItemUpdateNew.  # noqa: E501


        :return: The retail_price of this InfoItemUpdateNew.  # noqa: E501
        :rtype: int
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this InfoItemUpdateNew.


        :param retail_price: The retail_price of this InfoItemUpdateNew.  # noqa: E501
        :type: int
        """

        self._retail_price = retail_price

    @property
    def link(self):
        """Gets the link of this InfoItemUpdateNew.  # noqa: E501


        :return: The link of this InfoItemUpdateNew.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this InfoItemUpdateNew.


        :param link: The link of this InfoItemUpdateNew.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def discount_price(self):
        """Gets the discount_price of this InfoItemUpdateNew.  # noqa: E501


        :return: The discount_price of this InfoItemUpdateNew.  # noqa: E501
        :rtype: int
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this InfoItemUpdateNew.


        :param discount_price: The discount_price of this InfoItemUpdateNew.  # noqa: E501
        :type: int
        """

        self._discount_price = discount_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoItemUpdateNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoItemUpdateNew):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
