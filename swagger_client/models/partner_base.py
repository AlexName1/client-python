# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartnerBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_bot_id': 'int',
        'reserve_balance': 'float',
        'card_number': 'str',
        'telephone': 'str',
        'full_name': 'str',
        'bank_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_bot_id': 'user_bot_id',
        'reserve_balance': 'reserve_balance',
        'card_number': 'card_number',
        'telephone': 'telephone',
        'full_name': 'full_name',
        'bank_name': 'bank_name'
    }

    def __init__(self, id=None, user_bot_id=None, reserve_balance=None, card_number=None, telephone=None, full_name=None, bank_name=None):  # noqa: E501
        """PartnerBase - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_bot_id = None
        self._reserve_balance = None
        self._card_number = None
        self._telephone = None
        self._full_name = None
        self._bank_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_bot_id is not None:
            self.user_bot_id = user_bot_id
        if reserve_balance is not None:
            self.reserve_balance = reserve_balance
        if card_number is not None:
            self.card_number = card_number
        if telephone is not None:
            self.telephone = telephone
        if full_name is not None:
            self.full_name = full_name
        if bank_name is not None:
            self.bank_name = bank_name

    @property
    def id(self):
        """Gets the id of this PartnerBase.  # noqa: E501


        :return: The id of this PartnerBase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartnerBase.


        :param id: The id of this PartnerBase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_bot_id(self):
        """Gets the user_bot_id of this PartnerBase.  # noqa: E501


        :return: The user_bot_id of this PartnerBase.  # noqa: E501
        :rtype: int
        """
        return self._user_bot_id

    @user_bot_id.setter
    def user_bot_id(self, user_bot_id):
        """Sets the user_bot_id of this PartnerBase.


        :param user_bot_id: The user_bot_id of this PartnerBase.  # noqa: E501
        :type: int
        """

        self._user_bot_id = user_bot_id

    @property
    def reserve_balance(self):
        """Gets the reserve_balance of this PartnerBase.  # noqa: E501


        :return: The reserve_balance of this PartnerBase.  # noqa: E501
        :rtype: float
        """
        return self._reserve_balance

    @reserve_balance.setter
    def reserve_balance(self, reserve_balance):
        """Sets the reserve_balance of this PartnerBase.


        :param reserve_balance: The reserve_balance of this PartnerBase.  # noqa: E501
        :type: float
        """

        self._reserve_balance = reserve_balance

    @property
    def card_number(self):
        """Gets the card_number of this PartnerBase.  # noqa: E501


        :return: The card_number of this PartnerBase.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this PartnerBase.


        :param card_number: The card_number of this PartnerBase.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def telephone(self):
        """Gets the telephone of this PartnerBase.  # noqa: E501


        :return: The telephone of this PartnerBase.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this PartnerBase.


        :param telephone: The telephone of this PartnerBase.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def full_name(self):
        """Gets the full_name of this PartnerBase.  # noqa: E501


        :return: The full_name of this PartnerBase.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PartnerBase.


        :param full_name: The full_name of this PartnerBase.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def bank_name(self):
        """Gets the bank_name of this PartnerBase.  # noqa: E501


        :return: The bank_name of this PartnerBase.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this PartnerBase.


        :param bank_name: The bank_name of this PartnerBase.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
