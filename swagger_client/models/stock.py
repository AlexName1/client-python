# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'user_id': 'int',
        'number': 'int',
        'shipment_point': 'str',
        'quantities': 'QuantityBase',
        'purchases': 'PurchaseBase',
        'user': 'UserBase'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user_id': 'user_id',
        'number': 'number',
        'shipment_point': 'shipment_point',
        'quantities': 'quantities',
        'purchases': 'purchases',
        'user': 'user'
    }

    def __init__(self, id=None, name=None, user_id=None, number=None, shipment_point=None, quantities=None, purchases=None, user=None):  # noqa: E501
        """Stock - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._user_id = None
        self._number = None
        self._shipment_point = None
        self._quantities = None
        self._purchases = None
        self._user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if number is not None:
            self.number = number
        if shipment_point is not None:
            self.shipment_point = shipment_point
        self.quantities = quantities
        self.purchases = purchases
        self.user = user

    @property
    def id(self):
        """Gets the id of this Stock.  # noqa: E501


        :return: The id of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stock.


        :param id: The id of this Stock.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Stock.  # noqa: E501


        :return: The name of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stock.


        :param name: The name of this Stock.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this Stock.  # noqa: E501


        :return: The user_id of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Stock.


        :param user_id: The user_id of this Stock.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def number(self):
        """Gets the number of this Stock.  # noqa: E501


        :return: The number of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Stock.


        :param number: The number of this Stock.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def shipment_point(self):
        """Gets the shipment_point of this Stock.  # noqa: E501


        :return: The shipment_point of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._shipment_point

    @shipment_point.setter
    def shipment_point(self, shipment_point):
        """Sets the shipment_point of this Stock.


        :param shipment_point: The shipment_point of this Stock.  # noqa: E501
        :type: str
        """

        self._shipment_point = shipment_point

    @property
    def quantities(self):
        """Gets the quantities of this Stock.  # noqa: E501


        :return: The quantities of this Stock.  # noqa: E501
        :rtype: QuantityBase
        """
        return self._quantities

    @quantities.setter
    def quantities(self, quantities):
        """Sets the quantities of this Stock.


        :param quantities: The quantities of this Stock.  # noqa: E501
        :type: QuantityBase
        """
        if quantities is None:
            raise ValueError("Invalid value for `quantities`, must not be `None`")  # noqa: E501

        self._quantities = quantities

    @property
    def purchases(self):
        """Gets the purchases of this Stock.  # noqa: E501


        :return: The purchases of this Stock.  # noqa: E501
        :rtype: PurchaseBase
        """
        return self._purchases

    @purchases.setter
    def purchases(self, purchases):
        """Sets the purchases of this Stock.


        :param purchases: The purchases of this Stock.  # noqa: E501
        :type: PurchaseBase
        """
        if purchases is None:
            raise ValueError("Invalid value for `purchases`, must not be `None`")  # noqa: E501

        self._purchases = purchases

    @property
    def user(self):
        """Gets the user of this Stock.  # noqa: E501


        :return: The user of this Stock.  # noqa: E501
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Stock.


        :param user: The user of this Stock.  # noqa: E501
        :type: UserBase
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
