# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PurchaseInsert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buyer': 'str',
        'code': 'str',
        'price': 'int',
        'delivery': 'str',
        'address': 'str',
        'phone': 'str',
        'checking': 'bool',
        'pod': 'int',
        'comment': 'str',
        'size_id': 'int'
    }

    attribute_map = {
        'buyer': 'buyer',
        'code': 'code',
        'price': 'price',
        'delivery': 'delivery',
        'address': 'address',
        'phone': 'phone',
        'checking': 'checking',
        'pod': 'pod',
        'comment': 'comment',
        'size_id': 'size_id'
    }

    def __init__(self, buyer=None, code=None, price=None, delivery=None, address=None, phone=None, checking=None, pod=None, comment=None, size_id=None):  # noqa: E501
        """PurchaseInsert - a model defined in Swagger"""  # noqa: E501
        self._buyer = None
        self._code = None
        self._price = None
        self._delivery = None
        self._address = None
        self._phone = None
        self._checking = None
        self._pod = None
        self._comment = None
        self._size_id = None
        self.discriminator = None
        self.buyer = buyer
        self.code = code
        self.price = price
        self.delivery = delivery
        self.address = address
        self.phone = phone
        self.checking = checking
        self.pod = pod
        if comment is not None:
            self.comment = comment
        self.size_id = size_id

    @property
    def buyer(self):
        """Gets the buyer of this PurchaseInsert.  # noqa: E501


        :return: The buyer of this PurchaseInsert.  # noqa: E501
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this PurchaseInsert.


        :param buyer: The buyer of this PurchaseInsert.  # noqa: E501
        :type: str
        """
        if buyer is None:
            raise ValueError("Invalid value for `buyer`, must not be `None`")  # noqa: E501

        self._buyer = buyer

    @property
    def code(self):
        """Gets the code of this PurchaseInsert.  # noqa: E501


        :return: The code of this PurchaseInsert.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PurchaseInsert.


        :param code: The code of this PurchaseInsert.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def price(self):
        """Gets the price of this PurchaseInsert.  # noqa: E501


        :return: The price of this PurchaseInsert.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PurchaseInsert.


        :param price: The price of this PurchaseInsert.  # noqa: E501
        :type: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def delivery(self):
        """Gets the delivery of this PurchaseInsert.  # noqa: E501


        :return: The delivery of this PurchaseInsert.  # noqa: E501
        :rtype: str
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this PurchaseInsert.


        :param delivery: The delivery of this PurchaseInsert.  # noqa: E501
        :type: str
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def address(self):
        """Gets the address of this PurchaseInsert.  # noqa: E501


        :return: The address of this PurchaseInsert.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PurchaseInsert.


        :param address: The address of this PurchaseInsert.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def phone(self):
        """Gets the phone of this PurchaseInsert.  # noqa: E501


        :return: The phone of this PurchaseInsert.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PurchaseInsert.


        :param phone: The phone of this PurchaseInsert.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def checking(self):
        """Gets the checking of this PurchaseInsert.  # noqa: E501


        :return: The checking of this PurchaseInsert.  # noqa: E501
        :rtype: bool
        """
        return self._checking

    @checking.setter
    def checking(self, checking):
        """Sets the checking of this PurchaseInsert.


        :param checking: The checking of this PurchaseInsert.  # noqa: E501
        :type: bool
        """
        if checking is None:
            raise ValueError("Invalid value for `checking`, must not be `None`")  # noqa: E501

        self._checking = checking

    @property
    def pod(self):
        """Gets the pod of this PurchaseInsert.  # noqa: E501


        :return: The pod of this PurchaseInsert.  # noqa: E501
        :rtype: int
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this PurchaseInsert.


        :param pod: The pod of this PurchaseInsert.  # noqa: E501
        :type: int
        """
        if pod is None:
            raise ValueError("Invalid value for `pod`, must not be `None`")  # noqa: E501

        self._pod = pod

    @property
    def comment(self):
        """Gets the comment of this PurchaseInsert.  # noqa: E501


        :return: The comment of this PurchaseInsert.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PurchaseInsert.


        :param comment: The comment of this PurchaseInsert.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def size_id(self):
        """Gets the size_id of this PurchaseInsert.  # noqa: E501


        :return: The size_id of this PurchaseInsert.  # noqa: E501
        :rtype: int
        """
        return self._size_id

    @size_id.setter
    def size_id(self, size_id):
        """Sets the size_id of this PurchaseInsert.


        :param size_id: The size_id of this PurchaseInsert.  # noqa: E501
        :type: int
        """
        if size_id is None:
            raise ValueError("Invalid value for `size_id`, must not be `None`")  # noqa: E501

        self._size_id = size_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseInsert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseInsert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
