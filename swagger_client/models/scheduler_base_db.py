# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchedulerBaseDb(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'messages_tg_id': 'int',
        'users_bots_id': 'int',
        'trigger_datetime': 'datetime',
        'users_bots': 'UserBotBase',
        'messages_tg': 'MessageTgBase'
    }

    attribute_map = {
        'id': 'id',
        'messages_tg_id': 'messages_tg_id',
        'users_bots_id': 'users_bots_id',
        'trigger_datetime': 'trigger_datetime',
        'users_bots': 'users_bots',
        'messages_tg': 'messages_tg'
    }

    def __init__(self, id=None, messages_tg_id=None, users_bots_id=None, trigger_datetime=None, users_bots=None, messages_tg=None):  # noqa: E501
        """SchedulerBaseDb - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._messages_tg_id = None
        self._users_bots_id = None
        self._trigger_datetime = None
        self._users_bots = None
        self._messages_tg = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if messages_tg_id is not None:
            self.messages_tg_id = messages_tg_id
        if users_bots_id is not None:
            self.users_bots_id = users_bots_id
        if trigger_datetime is not None:
            self.trigger_datetime = trigger_datetime
        if users_bots is not None:
            self.users_bots = users_bots
        if messages_tg is not None:
            self.messages_tg = messages_tg

    @property
    def id(self):
        """Gets the id of this SchedulerBaseDb.  # noqa: E501


        :return: The id of this SchedulerBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SchedulerBaseDb.


        :param id: The id of this SchedulerBaseDb.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def messages_tg_id(self):
        """Gets the messages_tg_id of this SchedulerBaseDb.  # noqa: E501


        :return: The messages_tg_id of this SchedulerBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._messages_tg_id

    @messages_tg_id.setter
    def messages_tg_id(self, messages_tg_id):
        """Sets the messages_tg_id of this SchedulerBaseDb.


        :param messages_tg_id: The messages_tg_id of this SchedulerBaseDb.  # noqa: E501
        :type: int
        """

        self._messages_tg_id = messages_tg_id

    @property
    def users_bots_id(self):
        """Gets the users_bots_id of this SchedulerBaseDb.  # noqa: E501


        :return: The users_bots_id of this SchedulerBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._users_bots_id

    @users_bots_id.setter
    def users_bots_id(self, users_bots_id):
        """Sets the users_bots_id of this SchedulerBaseDb.


        :param users_bots_id: The users_bots_id of this SchedulerBaseDb.  # noqa: E501
        :type: int
        """

        self._users_bots_id = users_bots_id

    @property
    def trigger_datetime(self):
        """Gets the trigger_datetime of this SchedulerBaseDb.  # noqa: E501


        :return: The trigger_datetime of this SchedulerBaseDb.  # noqa: E501
        :rtype: datetime
        """
        return self._trigger_datetime

    @trigger_datetime.setter
    def trigger_datetime(self, trigger_datetime):
        """Sets the trigger_datetime of this SchedulerBaseDb.


        :param trigger_datetime: The trigger_datetime of this SchedulerBaseDb.  # noqa: E501
        :type: datetime
        """

        self._trigger_datetime = trigger_datetime

    @property
    def users_bots(self):
        """Gets the users_bots of this SchedulerBaseDb.  # noqa: E501


        :return: The users_bots of this SchedulerBaseDb.  # noqa: E501
        :rtype: UserBotBase
        """
        return self._users_bots

    @users_bots.setter
    def users_bots(self, users_bots):
        """Sets the users_bots of this SchedulerBaseDb.


        :param users_bots: The users_bots of this SchedulerBaseDb.  # noqa: E501
        :type: UserBotBase
        """

        self._users_bots = users_bots

    @property
    def messages_tg(self):
        """Gets the messages_tg of this SchedulerBaseDb.  # noqa: E501


        :return: The messages_tg of this SchedulerBaseDb.  # noqa: E501
        :rtype: MessageTgBase
        """
        return self._messages_tg

    @messages_tg.setter
    def messages_tg(self, messages_tg):
        """Sets the messages_tg of this SchedulerBaseDb.


        :param messages_tg: The messages_tg of this SchedulerBaseDb.  # noqa: E501
        :type: MessageTgBase
        """

        self._messages_tg = messages_tg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchedulerBaseDb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchedulerBaseDb):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
