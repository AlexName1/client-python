# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'changed': 'datetime',
        'active': 'bool',
        'brand': 'str',
        'model': 'str',
        'title': 'str',
        'retail_price': 'int',
        'drop_price': 'int',
        'link': 'str',
        'photos': 'str',
        'season': 'str',
        'color': 'str',
        'discount_price': 'int',
        'new': 'bool',
        'code_hash': 'str',
        'category_id': 'str',
        'manufacturer_country': 'str',
        'material': 'str',
        'dimension_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'changed': 'changed',
        'active': 'active',
        'brand': 'brand',
        'model': 'model',
        'title': 'title',
        'retail_price': 'retail_price',
        'drop_price': 'drop_price',
        'link': 'link',
        'photos': 'photos',
        'season': 'season',
        'color': 'color',
        'discount_price': 'discount_price',
        'new': 'new',
        'code_hash': 'code_hash',
        'category_id': 'category_id',
        'manufacturer_country': 'manufacturer_country',
        'material': 'material',
        'dimension_id': 'dimension_id'
    }

    def __init__(self, id=None, code=None, changed=None, active=None, brand=None, model=None, title=None, retail_price=None, drop_price=None, link=None, photos=None, season=None, color=None, discount_price=None, new=None, code_hash=None, category_id=None, manufacturer_country=None, material=None, dimension_id=None):  # noqa: E501
        """ItemBase - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._changed = None
        self._active = None
        self._brand = None
        self._model = None
        self._title = None
        self._retail_price = None
        self._drop_price = None
        self._link = None
        self._photos = None
        self._season = None
        self._color = None
        self._discount_price = None
        self._new = None
        self._code_hash = None
        self._category_id = None
        self._manufacturer_country = None
        self._material = None
        self._dimension_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if changed is not None:
            self.changed = changed
        if active is not None:
            self.active = active
        if brand is not None:
            self.brand = brand
        if model is not None:
            self.model = model
        if title is not None:
            self.title = title
        if retail_price is not None:
            self.retail_price = retail_price
        if drop_price is not None:
            self.drop_price = drop_price
        if link is not None:
            self.link = link
        if photos is not None:
            self.photos = photos
        if season is not None:
            self.season = season
        if color is not None:
            self.color = color
        if discount_price is not None:
            self.discount_price = discount_price
        if new is not None:
            self.new = new
        if code_hash is not None:
            self.code_hash = code_hash
        if category_id is not None:
            self.category_id = category_id
        if manufacturer_country is not None:
            self.manufacturer_country = manufacturer_country
        if material is not None:
            self.material = material
        if dimension_id is not None:
            self.dimension_id = dimension_id

    @property
    def id(self):
        """Gets the id of this ItemBase.  # noqa: E501


        :return: The id of this ItemBase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemBase.


        :param id: The id of this ItemBase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this ItemBase.  # noqa: E501


        :return: The code of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ItemBase.


        :param code: The code of this ItemBase.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def changed(self):
        """Gets the changed of this ItemBase.  # noqa: E501


        :return: The changed of this ItemBase.  # noqa: E501
        :rtype: datetime
        """
        return self._changed

    @changed.setter
    def changed(self, changed):
        """Sets the changed of this ItemBase.


        :param changed: The changed of this ItemBase.  # noqa: E501
        :type: datetime
        """

        self._changed = changed

    @property
    def active(self):
        """Gets the active of this ItemBase.  # noqa: E501


        :return: The active of this ItemBase.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ItemBase.


        :param active: The active of this ItemBase.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def brand(self):
        """Gets the brand of this ItemBase.  # noqa: E501


        :return: The brand of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ItemBase.


        :param brand: The brand of this ItemBase.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def model(self):
        """Gets the model of this ItemBase.  # noqa: E501


        :return: The model of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ItemBase.


        :param model: The model of this ItemBase.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def title(self):
        """Gets the title of this ItemBase.  # noqa: E501


        :return: The title of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemBase.


        :param title: The title of this ItemBase.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def retail_price(self):
        """Gets the retail_price of this ItemBase.  # noqa: E501


        :return: The retail_price of this ItemBase.  # noqa: E501
        :rtype: int
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this ItemBase.


        :param retail_price: The retail_price of this ItemBase.  # noqa: E501
        :type: int
        """

        self._retail_price = retail_price

    @property
    def drop_price(self):
        """Gets the drop_price of this ItemBase.  # noqa: E501


        :return: The drop_price of this ItemBase.  # noqa: E501
        :rtype: int
        """
        return self._drop_price

    @drop_price.setter
    def drop_price(self, drop_price):
        """Sets the drop_price of this ItemBase.


        :param drop_price: The drop_price of this ItemBase.  # noqa: E501
        :type: int
        """

        self._drop_price = drop_price

    @property
    def link(self):
        """Gets the link of this ItemBase.  # noqa: E501


        :return: The link of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ItemBase.


        :param link: The link of this ItemBase.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def photos(self):
        """Gets the photos of this ItemBase.  # noqa: E501


        :return: The photos of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this ItemBase.


        :param photos: The photos of this ItemBase.  # noqa: E501
        :type: str
        """

        self._photos = photos

    @property
    def season(self):
        """Gets the season of this ItemBase.  # noqa: E501


        :return: The season of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this ItemBase.


        :param season: The season of this ItemBase.  # noqa: E501
        :type: str
        """

        self._season = season

    @property
    def color(self):
        """Gets the color of this ItemBase.  # noqa: E501


        :return: The color of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ItemBase.


        :param color: The color of this ItemBase.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def discount_price(self):
        """Gets the discount_price of this ItemBase.  # noqa: E501


        :return: The discount_price of this ItemBase.  # noqa: E501
        :rtype: int
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this ItemBase.


        :param discount_price: The discount_price of this ItemBase.  # noqa: E501
        :type: int
        """

        self._discount_price = discount_price

    @property
    def new(self):
        """Gets the new of this ItemBase.  # noqa: E501


        :return: The new of this ItemBase.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this ItemBase.


        :param new: The new of this ItemBase.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def code_hash(self):
        """Gets the code_hash of this ItemBase.  # noqa: E501


        :return: The code_hash of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._code_hash

    @code_hash.setter
    def code_hash(self, code_hash):
        """Sets the code_hash of this ItemBase.


        :param code_hash: The code_hash of this ItemBase.  # noqa: E501
        :type: str
        """

        self._code_hash = code_hash

    @property
    def category_id(self):
        """Gets the category_id of this ItemBase.  # noqa: E501


        :return: The category_id of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ItemBase.


        :param category_id: The category_id of this ItemBase.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def manufacturer_country(self):
        """Gets the manufacturer_country of this ItemBase.  # noqa: E501


        :return: The manufacturer_country of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_country

    @manufacturer_country.setter
    def manufacturer_country(self, manufacturer_country):
        """Sets the manufacturer_country of this ItemBase.


        :param manufacturer_country: The manufacturer_country of this ItemBase.  # noqa: E501
        :type: str
        """

        self._manufacturer_country = manufacturer_country

    @property
    def material(self):
        """Gets the material of this ItemBase.  # noqa: E501


        :return: The material of this ItemBase.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this ItemBase.


        :param material: The material of this ItemBase.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def dimension_id(self):
        """Gets the dimension_id of this ItemBase.  # noqa: E501


        :return: The dimension_id of this ItemBase.  # noqa: E501
        :rtype: int
        """
        return self._dimension_id

    @dimension_id.setter
    def dimension_id(self, dimension_id):
        """Sets the dimension_id of this ItemBase.


        :param dimension_id: The dimension_id of this ItemBase.  # noqa: E501
        :type: int
        """

        self._dimension_id = dimension_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
