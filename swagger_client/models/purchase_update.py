# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PurchaseUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'status': 'int',
        'add_info': 'str',
        'add_photo': 'str',
        'paid': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'add_info': 'add_info',
        'add_photo': 'add_photo',
        'paid': 'paid'
    }

    def __init__(self, id=None, status=None, add_info=None, add_photo=None, paid=None):  # noqa: E501
        """PurchaseUpdate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._add_info = None
        self._add_photo = None
        self._paid = None
        self.discriminator = None
        self.id = id
        if status is not None:
            self.status = status
        if add_info is not None:
            self.add_info = add_info
        if add_photo is not None:
            self.add_photo = add_photo
        if paid is not None:
            self.paid = paid

    @property
    def id(self):
        """Gets the id of this PurchaseUpdate.  # noqa: E501


        :return: The id of this PurchaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchaseUpdate.


        :param id: The id of this PurchaseUpdate.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this PurchaseUpdate.  # noqa: E501


        :return: The status of this PurchaseUpdate.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PurchaseUpdate.


        :param status: The status of this PurchaseUpdate.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def add_info(self):
        """Gets the add_info of this PurchaseUpdate.  # noqa: E501


        :return: The add_info of this PurchaseUpdate.  # noqa: E501
        :rtype: str
        """
        return self._add_info

    @add_info.setter
    def add_info(self, add_info):
        """Sets the add_info of this PurchaseUpdate.


        :param add_info: The add_info of this PurchaseUpdate.  # noqa: E501
        :type: str
        """

        self._add_info = add_info

    @property
    def add_photo(self):
        """Gets the add_photo of this PurchaseUpdate.  # noqa: E501


        :return: The add_photo of this PurchaseUpdate.  # noqa: E501
        :rtype: str
        """
        return self._add_photo

    @add_photo.setter
    def add_photo(self, add_photo):
        """Sets the add_photo of this PurchaseUpdate.


        :param add_photo: The add_photo of this PurchaseUpdate.  # noqa: E501
        :type: str
        """

        self._add_photo = add_photo

    @property
    def paid(self):
        """Gets the paid of this PurchaseUpdate.  # noqa: E501


        :return: The paid of this PurchaseUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this PurchaseUpdate.


        :param paid: The paid of this PurchaseUpdate.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
