# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotBaseDb(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'token': 'str',
        'full_name': 'str',
        'username': 'str',
        'id_bot': 'int',
        'server_ip': 'str',
        'admin_list': 'list[int]',
        'text_channel_url': 'str',
        'support_url': 'str',
        'channel_url': 'str',
        'info_url': 'str',
        'comments_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'token': 'token',
        'full_name': 'full_name',
        'username': 'username',
        'id_bot': 'id_bot',
        'server_ip': 'server_ip',
        'admin_list': 'admin_list',
        'text_channel_url': 'text_channel_url',
        'support_url': 'support_url',
        'channel_url': 'channel_url',
        'info_url': 'info_url',
        'comments_url': 'comments_url'
    }

    def __init__(self, id=None, token=None, full_name=None, username=None, id_bot=None, server_ip=None, admin_list=None, text_channel_url=None, support_url=None, channel_url=None, info_url=None, comments_url=None):  # noqa: E501
        """BotBaseDb - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._token = None
        self._full_name = None
        self._username = None
        self._id_bot = None
        self._server_ip = None
        self._admin_list = None
        self._text_channel_url = None
        self._support_url = None
        self._channel_url = None
        self._info_url = None
        self._comments_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if token is not None:
            self.token = token
        if full_name is not None:
            self.full_name = full_name
        if username is not None:
            self.username = username
        if id_bot is not None:
            self.id_bot = id_bot
        if server_ip is not None:
            self.server_ip = server_ip
        if admin_list is not None:
            self.admin_list = admin_list
        if text_channel_url is not None:
            self.text_channel_url = text_channel_url
        if support_url is not None:
            self.support_url = support_url
        if channel_url is not None:
            self.channel_url = channel_url
        if info_url is not None:
            self.info_url = info_url
        if comments_url is not None:
            self.comments_url = comments_url

    @property
    def id(self):
        """Gets the id of this BotBaseDb.  # noqa: E501


        :return: The id of this BotBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BotBaseDb.


        :param id: The id of this BotBaseDb.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def token(self):
        """Gets the token of this BotBaseDb.  # noqa: E501


        :return: The token of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BotBaseDb.


        :param token: The token of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def full_name(self):
        """Gets the full_name of this BotBaseDb.  # noqa: E501


        :return: The full_name of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this BotBaseDb.


        :param full_name: The full_name of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def username(self):
        """Gets the username of this BotBaseDb.  # noqa: E501


        :return: The username of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BotBaseDb.


        :param username: The username of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def id_bot(self):
        """Gets the id_bot of this BotBaseDb.  # noqa: E501


        :return: The id_bot of this BotBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._id_bot

    @id_bot.setter
    def id_bot(self, id_bot):
        """Sets the id_bot of this BotBaseDb.


        :param id_bot: The id_bot of this BotBaseDb.  # noqa: E501
        :type: int
        """

        self._id_bot = id_bot

    @property
    def server_ip(self):
        """Gets the server_ip of this BotBaseDb.  # noqa: E501


        :return: The server_ip of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this BotBaseDb.


        :param server_ip: The server_ip of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._server_ip = server_ip

    @property
    def admin_list(self):
        """Gets the admin_list of this BotBaseDb.  # noqa: E501


        :return: The admin_list of this BotBaseDb.  # noqa: E501
        :rtype: list[int]
        """
        return self._admin_list

    @admin_list.setter
    def admin_list(self, admin_list):
        """Sets the admin_list of this BotBaseDb.


        :param admin_list: The admin_list of this BotBaseDb.  # noqa: E501
        :type: list[int]
        """

        self._admin_list = admin_list

    @property
    def text_channel_url(self):
        """Gets the text_channel_url of this BotBaseDb.  # noqa: E501


        :return: The text_channel_url of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._text_channel_url

    @text_channel_url.setter
    def text_channel_url(self, text_channel_url):
        """Sets the text_channel_url of this BotBaseDb.


        :param text_channel_url: The text_channel_url of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._text_channel_url = text_channel_url

    @property
    def support_url(self):
        """Gets the support_url of this BotBaseDb.  # noqa: E501


        :return: The support_url of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this BotBaseDb.


        :param support_url: The support_url of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._support_url = support_url

    @property
    def channel_url(self):
        """Gets the channel_url of this BotBaseDb.  # noqa: E501


        :return: The channel_url of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._channel_url

    @channel_url.setter
    def channel_url(self, channel_url):
        """Sets the channel_url of this BotBaseDb.


        :param channel_url: The channel_url of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._channel_url = channel_url

    @property
    def info_url(self):
        """Gets the info_url of this BotBaseDb.  # noqa: E501


        :return: The info_url of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._info_url

    @info_url.setter
    def info_url(self, info_url):
        """Sets the info_url of this BotBaseDb.


        :param info_url: The info_url of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._info_url = info_url

    @property
    def comments_url(self):
        """Gets the comments_url of this BotBaseDb.  # noqa: E501


        :return: The comments_url of this BotBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this BotBaseDb.


        :param comments_url: The comments_url of this BotBaseDb.  # noqa: E501
        :type: str
        """

        self._comments_url = comments_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotBaseDb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotBaseDb):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
