# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetBotInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_list': 'list[object]',
        'text_channel_url': 'str',
        'support_url': 'str',
        'channel_url': 'str',
        'info_url': 'str',
        'comments_url': 'str'
    }

    attribute_map = {
        'admin_list': 'admin_list',
        'text_channel_url': 'text_channel_url',
        'support_url': 'support_url',
        'channel_url': 'channel_url',
        'info_url': 'info_url',
        'comments_url': 'comments_url'
    }

    def __init__(self, admin_list=None, text_channel_url=None, support_url=None, channel_url=None, info_url=None, comments_url=None):  # noqa: E501
        """GetBotInfo - a model defined in Swagger"""  # noqa: E501
        self._admin_list = None
        self._text_channel_url = None
        self._support_url = None
        self._channel_url = None
        self._info_url = None
        self._comments_url = None
        self.discriminator = None
        self.admin_list = admin_list
        self.text_channel_url = text_channel_url
        self.support_url = support_url
        self.channel_url = channel_url
        self.info_url = info_url
        self.comments_url = comments_url

    @property
    def admin_list(self):
        """Gets the admin_list of this GetBotInfo.  # noqa: E501


        :return: The admin_list of this GetBotInfo.  # noqa: E501
        :rtype: list[object]
        """
        return self._admin_list

    @admin_list.setter
    def admin_list(self, admin_list):
        """Sets the admin_list of this GetBotInfo.


        :param admin_list: The admin_list of this GetBotInfo.  # noqa: E501
        :type: list[object]
        """
        if admin_list is None:
            raise ValueError("Invalid value for `admin_list`, must not be `None`")  # noqa: E501

        self._admin_list = admin_list

    @property
    def text_channel_url(self):
        """Gets the text_channel_url of this GetBotInfo.  # noqa: E501


        :return: The text_channel_url of this GetBotInfo.  # noqa: E501
        :rtype: str
        """
        return self._text_channel_url

    @text_channel_url.setter
    def text_channel_url(self, text_channel_url):
        """Sets the text_channel_url of this GetBotInfo.


        :param text_channel_url: The text_channel_url of this GetBotInfo.  # noqa: E501
        :type: str
        """
        if text_channel_url is None:
            raise ValueError("Invalid value for `text_channel_url`, must not be `None`")  # noqa: E501

        self._text_channel_url = text_channel_url

    @property
    def support_url(self):
        """Gets the support_url of this GetBotInfo.  # noqa: E501


        :return: The support_url of this GetBotInfo.  # noqa: E501
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this GetBotInfo.


        :param support_url: The support_url of this GetBotInfo.  # noqa: E501
        :type: str
        """
        if support_url is None:
            raise ValueError("Invalid value for `support_url`, must not be `None`")  # noqa: E501

        self._support_url = support_url

    @property
    def channel_url(self):
        """Gets the channel_url of this GetBotInfo.  # noqa: E501


        :return: The channel_url of this GetBotInfo.  # noqa: E501
        :rtype: str
        """
        return self._channel_url

    @channel_url.setter
    def channel_url(self, channel_url):
        """Sets the channel_url of this GetBotInfo.


        :param channel_url: The channel_url of this GetBotInfo.  # noqa: E501
        :type: str
        """
        if channel_url is None:
            raise ValueError("Invalid value for `channel_url`, must not be `None`")  # noqa: E501

        self._channel_url = channel_url

    @property
    def info_url(self):
        """Gets the info_url of this GetBotInfo.  # noqa: E501


        :return: The info_url of this GetBotInfo.  # noqa: E501
        :rtype: str
        """
        return self._info_url

    @info_url.setter
    def info_url(self, info_url):
        """Sets the info_url of this GetBotInfo.


        :param info_url: The info_url of this GetBotInfo.  # noqa: E501
        :type: str
        """
        if info_url is None:
            raise ValueError("Invalid value for `info_url`, must not be `None`")  # noqa: E501

        self._info_url = info_url

    @property
    def comments_url(self):
        """Gets the comments_url of this GetBotInfo.  # noqa: E501


        :return: The comments_url of this GetBotInfo.  # noqa: E501
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this GetBotInfo.


        :param comments_url: The comments_url of this GetBotInfo.  # noqa: E501
        :type: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")  # noqa: E501

        self._comments_url = comments_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetBotInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetBotInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
