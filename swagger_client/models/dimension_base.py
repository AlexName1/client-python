# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DimensionBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'width': 'int',
        'height': 'int',
        'depth': 'int'
    }

    attribute_map = {
        'id': 'id',
        'width': 'width',
        'height': 'height',
        'depth': 'depth'
    }

    def __init__(self, id=None, width=None, height=None, depth=None):  # noqa: E501
        """DimensionBase - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._width = None
        self._height = None
        self._depth = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if depth is not None:
            self.depth = depth

    @property
    def id(self):
        """Gets the id of this DimensionBase.  # noqa: E501


        :return: The id of this DimensionBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DimensionBase.


        :param id: The id of this DimensionBase.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def width(self):
        """Gets the width of this DimensionBase.  # noqa: E501


        :return: The width of this DimensionBase.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DimensionBase.


        :param width: The width of this DimensionBase.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this DimensionBase.  # noqa: E501


        :return: The height of this DimensionBase.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DimensionBase.


        :param height: The height of this DimensionBase.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def depth(self):
        """Gets the depth of this DimensionBase.  # noqa: E501


        :return: The depth of this DimensionBase.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this DimensionBase.


        :param depth: The depth of this DimensionBase.  # noqa: E501
        :type: int
        """

        self._depth = depth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DimensionBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DimensionBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
