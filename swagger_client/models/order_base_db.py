# coding: utf-8

"""
    Rest DB

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderBaseDb(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created': 'datetime',
        'user_bot_id': 'int',
        'buyer': 'str',
        'price': 'int',
        'delivery': 'str',
        'address': 'str',
        'phone': 'str',
        'checking': 'bool',
        'payment_receipt': 'str',
        'comment': 'str',
        'info_delivery': 'str',
        'partner': 'bool',
        'paid': 'bool',
        'purchases': 'list[PurchaseBaseDb]',
        'user_bot': 'UserBotBaseDb'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'user_bot_id': 'user_bot_id',
        'buyer': 'buyer',
        'price': 'price',
        'delivery': 'delivery',
        'address': 'address',
        'phone': 'phone',
        'checking': 'checking',
        'payment_receipt': 'payment_receipt',
        'comment': 'comment',
        'info_delivery': 'info_delivery',
        'partner': 'partner',
        'paid': 'paid',
        'purchases': 'purchases',
        'user_bot': 'user_bot'
    }

    def __init__(self, id=None, created=None, user_bot_id=None, buyer=None, price=None, delivery=None, address=None, phone=None, checking=None, payment_receipt=None, comment=None, info_delivery=None, partner=None, paid=None, purchases=None, user_bot=None):  # noqa: E501
        """OrderBaseDb - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._user_bot_id = None
        self._buyer = None
        self._price = None
        self._delivery = None
        self._address = None
        self._phone = None
        self._checking = None
        self._payment_receipt = None
        self._comment = None
        self._info_delivery = None
        self._partner = None
        self._paid = None
        self._purchases = None
        self._user_bot = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if user_bot_id is not None:
            self.user_bot_id = user_bot_id
        if buyer is not None:
            self.buyer = buyer
        if price is not None:
            self.price = price
        if delivery is not None:
            self.delivery = delivery
        if address is not None:
            self.address = address
        if phone is not None:
            self.phone = phone
        if checking is not None:
            self.checking = checking
        if payment_receipt is not None:
            self.payment_receipt = payment_receipt
        if comment is not None:
            self.comment = comment
        if info_delivery is not None:
            self.info_delivery = info_delivery
        if partner is not None:
            self.partner = partner
        if paid is not None:
            self.paid = paid
        if purchases is not None:
            self.purchases = purchases
        if user_bot is not None:
            self.user_bot = user_bot

    @property
    def id(self):
        """Gets the id of this OrderBaseDb.  # noqa: E501


        :return: The id of this OrderBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderBaseDb.


        :param id: The id of this OrderBaseDb.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this OrderBaseDb.  # noqa: E501


        :return: The created of this OrderBaseDb.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrderBaseDb.


        :param created: The created of this OrderBaseDb.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def user_bot_id(self):
        """Gets the user_bot_id of this OrderBaseDb.  # noqa: E501


        :return: The user_bot_id of this OrderBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._user_bot_id

    @user_bot_id.setter
    def user_bot_id(self, user_bot_id):
        """Sets the user_bot_id of this OrderBaseDb.


        :param user_bot_id: The user_bot_id of this OrderBaseDb.  # noqa: E501
        :type: int
        """

        self._user_bot_id = user_bot_id

    @property
    def buyer(self):
        """Gets the buyer of this OrderBaseDb.  # noqa: E501


        :return: The buyer of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this OrderBaseDb.


        :param buyer: The buyer of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._buyer = buyer

    @property
    def price(self):
        """Gets the price of this OrderBaseDb.  # noqa: E501


        :return: The price of this OrderBaseDb.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderBaseDb.


        :param price: The price of this OrderBaseDb.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def delivery(self):
        """Gets the delivery of this OrderBaseDb.  # noqa: E501


        :return: The delivery of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this OrderBaseDb.


        :param delivery: The delivery of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._delivery = delivery

    @property
    def address(self):
        """Gets the address of this OrderBaseDb.  # noqa: E501


        :return: The address of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrderBaseDb.


        :param address: The address of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def phone(self):
        """Gets the phone of this OrderBaseDb.  # noqa: E501


        :return: The phone of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this OrderBaseDb.


        :param phone: The phone of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def checking(self):
        """Gets the checking of this OrderBaseDb.  # noqa: E501


        :return: The checking of this OrderBaseDb.  # noqa: E501
        :rtype: bool
        """
        return self._checking

    @checking.setter
    def checking(self, checking):
        """Sets the checking of this OrderBaseDb.


        :param checking: The checking of this OrderBaseDb.  # noqa: E501
        :type: bool
        """

        self._checking = checking

    @property
    def payment_receipt(self):
        """Gets the payment_receipt of this OrderBaseDb.  # noqa: E501


        :return: The payment_receipt of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._payment_receipt

    @payment_receipt.setter
    def payment_receipt(self, payment_receipt):
        """Sets the payment_receipt of this OrderBaseDb.


        :param payment_receipt: The payment_receipt of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._payment_receipt = payment_receipt

    @property
    def comment(self):
        """Gets the comment of this OrderBaseDb.  # noqa: E501


        :return: The comment of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OrderBaseDb.


        :param comment: The comment of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def info_delivery(self):
        """Gets the info_delivery of this OrderBaseDb.  # noqa: E501


        :return: The info_delivery of this OrderBaseDb.  # noqa: E501
        :rtype: str
        """
        return self._info_delivery

    @info_delivery.setter
    def info_delivery(self, info_delivery):
        """Sets the info_delivery of this OrderBaseDb.


        :param info_delivery: The info_delivery of this OrderBaseDb.  # noqa: E501
        :type: str
        """

        self._info_delivery = info_delivery

    @property
    def partner(self):
        """Gets the partner of this OrderBaseDb.  # noqa: E501


        :return: The partner of this OrderBaseDb.  # noqa: E501
        :rtype: bool
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this OrderBaseDb.


        :param partner: The partner of this OrderBaseDb.  # noqa: E501
        :type: bool
        """

        self._partner = partner

    @property
    def paid(self):
        """Gets the paid of this OrderBaseDb.  # noqa: E501


        :return: The paid of this OrderBaseDb.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this OrderBaseDb.


        :param paid: The paid of this OrderBaseDb.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def purchases(self):
        """Gets the purchases of this OrderBaseDb.  # noqa: E501


        :return: The purchases of this OrderBaseDb.  # noqa: E501
        :rtype: list[PurchaseBaseDb]
        """
        return self._purchases

    @purchases.setter
    def purchases(self, purchases):
        """Sets the purchases of this OrderBaseDb.


        :param purchases: The purchases of this OrderBaseDb.  # noqa: E501
        :type: list[PurchaseBaseDb]
        """

        self._purchases = purchases

    @property
    def user_bot(self):
        """Gets the user_bot of this OrderBaseDb.  # noqa: E501


        :return: The user_bot of this OrderBaseDb.  # noqa: E501
        :rtype: UserBotBaseDb
        """
        return self._user_bot

    @user_bot.setter
    def user_bot(self, user_bot):
        """Sets the user_bot of this OrderBaseDb.


        :param user_bot: The user_bot of this OrderBaseDb.  # noqa: E501
        :type: UserBotBaseDb
        """

        self._user_bot = user_bot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderBaseDb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBaseDb):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
